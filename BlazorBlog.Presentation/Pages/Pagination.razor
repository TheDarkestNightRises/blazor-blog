@page "/pagination"
@using BlazorBlog.Shared.Models
@using BlazorBlog.Presentation.Services
@inject IBlogService BlogService
@inject HttpClient _httpClient;
<MudTable ServerData="@(new Func<TableState, Task<TableData<BlogPost>>>(LoadPosts))" @ref="_table">
    <ToolBarContent>Todo List</ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Item Name</MudTh>
        <MudTh>Is Completed</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Item Name">@context.Author</MudTd>
        <MudTd DataLabel="Is Completed">@context.Title</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
    </PagerContent>
</MudTable>

@code {
    private MudTable<BlogPost> _table;
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    private IEnumerable<BlogPost> _elements = new List<BlogPost>();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }
    
    
    public async Task<TableData<BlogPost>> LoadPosts(TableState state)
    {
        var response = await _httpClient.GetFromJsonAsync<BlogPostPagination>($"/api/Todo?currentPageNumber={(state.Page + 1)}&pagesize={state.PageSize}");
 
 
        return new TableData<BlogPost>() { Items = response.Data, TotalItems = response.TotalCount };
    }
}
